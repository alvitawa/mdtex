#!/usr/bin/env bash

TEMPLATE=~/setup/mdtex/template.tex_
HELPTXT=~/setup/mdtex/HELP.txt

# https://medium.com/@Drew_Stokes/bash-argument-parsing-54f3b81a6a8f
PARAMS=""

while (( "$#" )); do
  case "$1" in
    -i|--inline) # place the markdown in the tex file itself
      INLINE=1
      shift 1
      ;;
    -n|--nomd) # create default latex file with no markdown input
      NOMD=1
      shift 1
      ;;
    -t|--title)
      TITLE="\title{$2}"
      shift 2
      ;;
    -a|--author)
      AUTHOR="\author{$2}"
      shift 2
      ;;
    -d|--dest) # destination folder of the tex file, defaults to name
      DEST="$2"
      shift 2
      ;;
    -h|--help)
      HELP=1
      shift 1
      ;;
    --) # end argument parsing
      shift
      break
      ;;
    -*|--*=) # unsupported flags
      echo "Error: Unsupported flag '$1'" >&2
      exit 1
      ;;
    *) # preserve positional arguments
      PARAMS="$PARAMS $1"
      shift
      ;;
  esac
done

if [[ ! -z $HELP ]]; then
  cat $HELPTXT
  exit 0
fi

# set positional arguments in their proper place
eval set -- "$PARAMS"

if [[ $# -eq 1 ]]; then
    # Derive name from markdown filename
    # (With -n, this just removes the file extension from the given name)
    NAME=$(echo "$1" | cut -f 1 -d '.')
    PARAMS="$PARAMS $NAME"
fi

eval set -- "$PARAMS"

if [[ $# -ne 2 ]]; then
  echo "Error: Invalid number of arguments ($#)"
  exit 1
fi

echo $INLINE
echo $NOMD
echo $TITLE;
echo $AUTHOR;
echo $DEST;
echo $1;
echo $2;

TMPDIR="__tmp__$2"
if [[ -z $DEST ]]; then
  DEST=$2
fi

# Fails if markdown filename equals name
mkdir -p $DEST
mv $1 $DEST

if [[ ! -z $TITLE || ! -z $AUTHOR ]]; then
  MAKETITLE="\maketitle"
fi

if [[ ! -z $NOMD ]]; then
  MARKDOWN=""
elif [[ -z "INLINE" ]]; then
  MARKDOWN="INLINE" #TODO
else
  MARKDOWN="\markdownInput{$1}"
fi

TEMPLATE_TEXT=$(cat "$TEMPLATE")

eval "cat > $DEST/$NAME.tex <<EOF
$TEMPLATE_TEXT
EOF
"